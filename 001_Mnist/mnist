{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.datasets import mnist\n",
    "from keras import models\n",
    "from keras import layers\n",
    "\n",
    "from keras.utils import to_categorical  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "(train_x, train_y), (test_x, test_y) = mnist.load_data()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Checking and obtaining the data shapes and sizes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "no_train_x = train_x.shape[0]\n",
    "img_size_width = train_x.shape[1]\n",
    "img_size_height = train_x.shape[2]\n",
    "\n",
    "no_test_x = test_x.shape[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating a 2 layer network \n",
    "\n",
    "-  One layer with 512 neurons\n",
    "-  One output layer with 10 neurons \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "WARNING:tensorflow:From /home/hermes/.virtualenvs/dl_proj/local/lib/python2.7/site-packages/keras/backend/tensorflow_backend.py:66: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n\nWARNING:tensorflow:From /home/hermes/.virtualenvs/dl_proj/local/lib/python2.7/site-packages/keras/backend/tensorflow_backend.py:541: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n\nWARNING:tensorflow:From /home/hermes/.virtualenvs/dl_proj/local/lib/python2.7/site-packages/keras/backend/tensorflow_backend.py:4432: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n\n"
    }
   ],
   "source": [
    "    nn = models.Sequential()\n",
    "    nn.add(layers.Dense(512, activation='relu', input_shape=(28*28, )))\n",
    "    nn.add(layers.Dense(10, activation='softmax'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Making the NN ready for training\n",
    "\n",
    "- we neeed the **loss function**\n",
    "- the optimizer \n",
    "- and the metric used to monitor the training "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "WARNING:tensorflow:From /home/hermes/.virtualenvs/dl_proj/local/lib/python2.7/site-packages/keras/optimizers.py:793: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n\nWARNING:tensorflow:From /home/hermes/.virtualenvs/dl_proj/local/lib/python2.7/site-packages/keras/backend/tensorflow_backend.py:3576: The name tf.log is deprecated. Please use tf.math.log instead.\n\n"
    }
   ],
   "source": [
    "    nn.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Reshaping the Data\n",
    "\n",
    "This is done so that the data matches the input of the network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reshaping \n",
    "\n",
    "train_x = train_x.reshape(no_train_x, img_size_width * img_size_height )\n",
    "train_x = train_x.astype('float32')/255\n",
    "\n",
    "test_x = test_x.reshape(no_test_x, img_size_width * img_size_height )\n",
    "test_x = test_x.astype('float32')/255\n",
    "\n",
    "train_y = to_categorical(train_y)\n",
    "test_y  = to_categorical(test_y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Training the Network \n",
    "\n",
    "We pass:\n",
    "\n",
    "    - trining data set\n",
    "    - training labels (Y)\n",
    "    - number of epochs\n",
    "    - batch size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Epoch 1/10\n60000/60000 [==============================] - 8s 138us/step - loss: 0.3065 - acc: 0.9128\nEpoch 2/10\n60000/60000 [==============================] - 9s 146us/step - loss: 0.2917 - acc: 0.9162\nEpoch 3/10\n60000/60000 [==============================] - 7s 120us/step - loss: 0.2797 - acc: 0.9192\nEpoch 4/10\n60000/60000 [==============================] - 6s 98us/step - loss: 0.2687 - acc: 0.9228\nEpoch 5/10\n60000/60000 [==============================] - 6s 94us/step - loss: 0.2587 - acc: 0.9256\nEpoch 6/10\n60000/60000 [==============================] - 6s 98us/step - loss: 0.2494 - acc: 0.9280\nEpoch 7/10\n60000/60000 [==============================] - 6s 95us/step - loss: 0.2402 - acc: 0.9307\nEpoch 8/10\n60000/60000 [==============================] - 6s 97us/step - loss: 0.2311 - acc: 0.9331\nEpoch 9/10\n60000/60000 [==============================] - 6s 105us/step - loss: 0.2223 - acc: 0.9354\nEpoch 10/10\n60000/60000 [==============================] - 6s 97us/step - loss: 0.2139 - acc: 0.9378\n"
    },
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": "<keras.callbacks.History at 0x7f006012ab10>"
     },
     "metadata": {},
     "execution_count": 33
    }
   ],
   "source": [
    "nn.fit(train_x, train_y, epochs=10, batch_size=128)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "10000/10000 [==============================] - 1s 119us/step\n('test accuracy: ', 0.9386)\n('test loss: ', 0.21070280926823615)\n"
    }
   ],
   "source": [
    "test_loss, test_acc = nn.evaluate(test_x, test_y)\n",
    "print('test accuracy: ', test_acc)\n",
    "print('test loss: ', test_loss)"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python271264bitdlprojvirtualenvf8beb71de42748b287dc5120750401b0",
   "display_name": "Python 2.7.12 64-bit ('dl_proj': virtualenv)"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}